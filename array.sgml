<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.0//EN">
<refentry id="array">

<refmeta>
<refentrytitle>libcontain-array</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>

<refnamediv>
<refname>array</refname>
<refpurpose>Provide a fast, thread-safe, easy to use array implementation</refpurpose>
</refnamediv>

<refsect1>
<title>Description</title>
<para>This manpage describes how to use the array implementation in the jail-ust
libcontain library. As all containers in the libcontain library, this 
implementation is meant to be <quote>blindingly fast</quote> as well as 
thread-safe, easy to use and well-documented. This manpage provides the 
<quote>well-documented</quote> part.</para>
<para>At the time of this writing, the array implementation does not live up to
all of its goals yet: it is fast, but it's not quite as thread-safe as I would 
like it to be. If you're concerned about thread-safety, skip to the section with
the same name.</para>
</refsect1>

<refsect1>
<title>Synopsis</title>
<para><screen><![CDATA[
#include <libcontain/array.h>

array_t * new_array(size_t size);
void free_array(array_t * array);
void * array_get(array_t * array, size_t i);
void array_put(array_t * array, size_t i, void * val);
void array_push_back(array_t * array, void * val);
size_t array_get_size(array_t * array);
size_t array_get_numentries(array_t * array);
void array_resize(array_t * array, size_t size);
array_t * array_copy(array_t * array);
array_t * array_merge(array_t * array1, array_t * array2, array_cmp_func_t cmp_func);
array_t * array_deep_copy(array_t * array, array_valcopy_func_t array_valcopy_func);
void array_condense(array_t * array);
void array_sort(array_t * array, array_cmp_func_t cmp_func);
void * array_search(array_t * array, void * val, array_cmp_func_t cmp_func);
void array_set_default_increase(array_t * array, size_t increase);
void array_foreach(array_t * array, array_foreach_func_t array_foreach_func, void * data);
]]></screen></para>
</refsect1>

<refsect1>
<title>Functions</title>
<para>
<variablelist>
<varlistentry><term><function>array_t * new_array(size_t size)</function></term>
<listitem><para>Allocate a new array of size SIZE.</para>
<para>This function allocates a new array of the given size. The new array is 
empty and is guaranteed to have enough space for at least SIZE elements. On
error, NULL is returned.</para>
<para>This function may safely be called from any number of threads at a time.</para>
</listitem></varlistentry>

<varlistentry><term><function>void free_array(array_t * array)</function></term>
<listitem><para>Free and destroy the array ARRAY.</para>
<para>This function destroys the array and frees any memory associated with
it. It does not use or free anything it contains.</para>
<para>As of the moment this function starts, all other operations on array 
ARRAY have undefined results.</para>
</listitem></varlistentry>

<varlistentry><term><function>void * array_get(array_t * array, size_t i)</function></term>
<listitem><para>Retrieve the item stored in ARRAY at index I.</para>
<para>If I is out of bounds or if the array does not contain anything at index
I, NULL is returned.</para>
<para>This function may safely be combined with any other function in this API 
on the same ARRAY object.</para>
</listitem></varlistentry>

<varlistentry><term><function>void array_put(array_t * array, size_t i, void * val)</function></term>
<listitem><para>Store the value VAL at index I in array ARRAY</para>
<para>This function puts the value VAL at index I in array ARRAY and grows
the array so I is in bounds if need be. If VAL is NULL, the number of entries
in the array is decrement iff there was a value at index I.</para>
<para>This array may safely be combined with any other function in the API on 
the same array object.</para></listitem></varlistentry>

<varlistentry><term><function>void array_push_back(array_t * array, void * val)</function></term>
<listitem><para>Push a value VAL on the end of array ARRAY.</para>
<para>This function pushes the value VAL to the end of the array. It will 
condense the array if it isn't condensed yet and it will grow the array if the
size isn't enough for another value.</para>
<para>This function may be combined with any call to any function in this API
on a single object. However, if you combine this with a call to 
<function>array_put</function> (where I is out-of-bounds), 
<function>array_resize</function> or <function>array_push_back</function> (where
the array is not big enough to add another value), there is a slight chance of 
the value being added to the array more than once (i.e. this chance only
exists if the array is resized by any of these functions).</para></listitem>
</varlistentry>

<varlistentry><term><function>size_t array_get_size(array_t * array)</function></term>
<listitem><para>Get the size of the array ARRAY</para>
<para>Returns the size of the array - the number of entries the array may 
contain.</para>
<para>This function may safely be called from any number of threads on
a single array at any time.</para></listitem></varlistentry>

<varlistentry><term><function>size_t array_get_numentries(array_t * array)</function></term>
<listitem><para>Get the number of entries currently in the array ARRAY</para>
<para>Returns the number of entries currently stored in the array.</para>
<para>This function may safely be called from any number of threads on
a single array at any time</para>
</listitem></varlistentry>

<varlistentry><term><function>void array_resize(array_t * array, size_t size)</function></term>
<listitem><para>Resize the array ARRAY to be able to hold at least SIZE elements.</para>
<para>This function can safely be called in combination with any other function
in the API, including itself. If more than one resize is in progress, the one
that results in the largest array will <quote>win</quote></para></listitem></varlistentry>

<varlistentry><term><function>array_t * array_copy(array_t * array)</function></term>
<listitem><para>Copy the array ARRAY.</para>
<para>This function makes an exact copy of the array ARRAY and returns its 
handle. On error, it returns NULL. It does not copy the elements it contains 
but does copy the pointers to the new array. To copy whatever the pointers 
point to, use the <function>array_deep_copy</function> function.</para>
<para>This function can safely be called in combination with any other function
on the same array.</para></listitem></varlistentry>

<varlistentry><term><function>array_t * array_deep_copy(array_t * array, array_valcopy_func_t array_valcopy_func)</function></term>
<listitem><para>Make a copy of array ARRAY and call ARRAY_VALCOPY_FUNC for 
each value to copy it.</para>
<para>This creates a new array and returns a pointer to it. It
returns NULL on error. The ARRAY_VALCOPY_FUNC is only called on non-NULL 
elements in the array and is expected to never fail.</para>
<para>This function can safely be called in combination with any other function
on the same array.</para></listitem></varlistentry>

<varlistentry><term><function>array_t * array_merge(array_t * array1, array_t * array2, array_cmp_func_t cmp_func)</function></term>
<listitem><para>Merge two arrays into a third.</para>
<para>This function creates a new array containing the pointers of ARRAY1 and 
ARRAY2 while remaining sorted. Both arrays are assumed to be sorted (and 
condensed). Otherwise, the results are undefined. The CMP_FUNC function is used
to compare the elements in the two arrays.</para>
<para>This function can safely be combined with any of the reading functions of
this API. Writing to one of the two arrays while this function is in progress
will cause unspecified results in the third array - the one produced by this
function.</para></listitem></varlistentry>

<varlistentry><term><function>void array_condense(array_t * array)</function></term>
<listitem><para>Condense the array ARRAY</para>
<para>Condense the array so that all elements in the array are consecutive. The
order of the elements is undefined, but after this operation, all elements are
guaranteed to follow eachother, which makes the 
<function>array_push_back</function> and sort functions faster.</para>
<para>For concurrent calls to this function on the same array, this function is
as thread-safe as the underlying qsort(3) implementation. Otherwise, this 
function can safely be combined with any of the other functions in this API, 
but condensing may not work properly if values are added or removed during the
condensing operation.</para></listitem></varlistentry>

<varlistentry><term><function>void array_sort(array_t * array, array_cmp_func_t cmp_func)</function></term>
<listitem><para>Sort the array in ascending order.</para>
<para>Comparisons are done with the CMP_FUNC function, see below. The sorting
algorithm used is a binary merge sort. It should theoretically be faster than
QuickSort, which is Omega(n^2) whereas the binary merge sort is O(n lg(n)). 
However, I have not emperically proven that it is really faster (which would 
be rather difficult to prove as QuickSort is randomized). I am more than 
willing to entertain discussions and testcases on this matter.</para>
<para>This function can safely be called in combination with any of the reading
functions, but writing to an array while it is being sorted will result in
unspecified results in the array.
</para></listitem></varlistentry>

<varlistentry><term><function>void * array_search(array_t * array, void * val, array_cmp_func_t cmp_func)</function></term>
<listitem><para>Search the array ARRAY for the value VAL with compare function
CMP_FUNC.</para>
<para>This function uses one of two search algorithms depending on whether the
array is sorted. If it is sorted, this function uses the binary search 
algorithm. If it is not sortedm this function uses a linear search algorithm.
</para>
<para>This function can safely be combined with any other function in the API
on the same array object. However, it is not guaranteed to return the proper
results of the array contents is changed during the search and may, in that
case, return false negatives.
</para></listitem></varlistentry>

<varlistentry><term><function>void array_set_default_increase(array_t * array, size_t increase)</function></term>
<listitem><para>Set the size by which the array ARRAY is grown for out-of-bounds
write operations.</para>
<para>This function may safely be called in combination with other functions on the same array.</para></listitem></varlistentry>

<varlistentry><term><function>void array_foreach(array_t * array, array_foreach_func_t array_foreach_func, void * data)</function></term>
<listitem><para>For each non-null element in array ARRAY, call function ARRAY_FOREACH_FUNC with the value and the user data DATA.</para>
<para>This function may safely be called in combination with other functions on the same array.</para></listitem></varlistentry>

</variablelist>
</para>
</refsect1>

<refsect1>
<title>Thread-Safety</title>
<para>The implementation is completely re-entrant. You can therefore safely use
any number of <emphasis>different</emphasis> instances in different threads at
the same time. This implementation is also intended to be thread-safe in that 
you can use almost any combination of functions on a single array object without
thread-safety problems. Exceptions on this are that writing to an array while it
is being sorted may result in undefined values being stored in the array; 
condensing an array from more than one thread at a time is no more thread-safe
that the underlying qsort implementation from the CRTL is for sorting the same
array from different threads at the same time.</para>
<para>Resizing an array presents a small problem with regards to thread-safety:
there is a bug in the current implementation (see the Bugs section) that could
result in information being lost of you write while the array is being resized.
</para>
<para>Basically, if your array is big enough, you can any of the functions that
only read from the array with eachother, and with one of the functions that
write to the array, without problems.</para>
</refsect1>

<refsect1>
<title>Helper functions</title>
<para>The implementation needs a number of helper functions at a number of 
occasions. These helper functions are defined according to types 
<function>array_cmp_func_t</function>, 
<function>array_valcopy_func_t</function> and 
<function>array_foreach_func_t</function></para>
<para><function>array_cmp_func_t</function> compare two values, K1 and K2, so
that if K1 < K2; array_cmp_func_t(K1, K2) < 0; if K1 == K2; 
array_cmp_func_t(K1, K2) == 0 and if K1 > K2; array_cmp_func_t(K1, K2) > 0. 
Neither K1 nor K2 will be NULL.</para>
<para><function>array_valcopy_func_t</function> makes a copy of the value VAL. 
It is expected to never fail. Its return value is not checked.</para>
<para><function>array_foreach_func_t</function> is called only on non-NULL 
elements and has two parameters: VAL and DATA. VAL is expected to not be 
changed, DATA may be altered.</para>
</refsect1>

<refsect1>
<title>Bugs</title>
<para>There is a race condition in <function>array_resize</function> which 
causes any changes made to the array between the time its contents is copied
to the new array and the time the new array is hooked into the descriptor
to be lost. This race condition has no solution yet, which means that any
operation that resizes the array (out-of-bounds indices in 
<function>array_put</function> or <function>array_push_back</function> or
calls to <function>array_resize</function>) combined with any operations 
that changes the array (calls to <function>array_put</function> or <function>
array_push_back</function>) may cause loss of information.</para>
</refsect1>

</refentry>

