2004-07-23	blytkerchan
	* semaphore.c (lt_sem_wait): change logic to FIFO

	* module.mk: don't compile semaphores if we don't have pthread_sigmask
	* barrier.c (barrier_wait): cast atomic_increment parameter to uint32_t*
	* semaphore.c: include necessary headers
	s/thread_t/lt_thread_t/g
	(lt_sem_init): cast second arg of atomic_set to void*
	(lt_sem_wait): repair calls to sigemptyset, sigaddset and
	pthread_sigmask
	* semaphore.h: include thread.h
	[lt_sem_t]: add tail member
	s/thread_t/lt_thread_t/g

	* semaphore.c (lt_sem_create): take new member tail into account
	(lt_sem_enq): implement
	(lt_sem_deq): re-implement and assume only one caller at a time
	* semaphore.h [lt_sem_t]: add member tail
	* module.mk: remove erroneous backslash

2004-07-22	blytkerchan
	* how_semaphores_work: undefine behaviour of lt_sem_init if semaphore is in use
	* semaphore.c (lt_sem_first): new function
	(lt_sem_enq): ditto (empty for the moment)
	(lt_sem_deq): ditto
	(lt_sem_init): implement
	(lt_sem_create): ditto
	(lt_sem_free): ditto
	(lt_sem_wait): ditto
	(lt_sem_release): ditto
	* semaphore.h: change prototype of lt_sem_init

	* version: new file

	* semaphore.c: new file
	* semaphore.h: ditto
	* module.mk: ditto

2004-07-19	blytkerchan
	* how_semaphores_work.txt: new file

2004-07-17	blytkerchan
	* ChangeLog: new file
	* Makefile: ditto
	* barrier.c: ditto
	* barrier.h: ditto
	* critical_section.c: ditto
	* critical_section.h: ditto
	* how_critical_sections_work.txt: ditto
	* thread.c: ditto
	* thread.h: ditto

